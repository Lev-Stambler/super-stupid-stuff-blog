import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, B as validate_each_argument, v as validate_slots, e as element, t as text, b as claim_element, f as children, g as claim_text, j as detach_dev, k as attr_dev, l as add_location, m as insert_dev, n as append_dev, C as set_data_dev, u as space, w as claim_space, D as noop, E as destroy_each, c as create_component, h as claim_component, o as mount_component, p as transition_in, q as transition_out, r as destroy_component, F as empty, A as check_outros, z as group_outros } from './client.e5a45c5d.js';
import { H as Header } from './Tags.7de8859c.js';

/* src/components/content/ShortCard.svelte generated by Svelte v3.20.1 */
const file = "src/components/content/ShortCard.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	return child_ctx;
}

// (35:6) {#each article.tag_list as tag}
function create_each_block(ctx) {
	let span;
	let t0;
	let t1_value = /*tag*/ ctx[1] + "";
	let t1;

	const block = {
		c: function create() {
			span = element("span");
			t0 = text("#");
			t1 = text(t1_value);
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t0 = claim_text(span_nodes, "#");
			t1 = claim_text(span_nodes, t1_value);
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", "tag");
			add_location(span, file, 35, 8, 625);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t0);
			append_dev(span, t1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*article*/ 1 && t1_value !== (t1_value = /*tag*/ ctx[1] + "")) set_data_dev(t1, t1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(35:6) {#each article.tag_list as tag}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let a;
	let div2;
	let t0_value = /*article*/ ctx[0].date_published + "";
	let t0;
	let t1;
	let h1;
	let t2_value = /*article*/ ctx[0].title + "";
	let t2;
	let t3;
	let div0;
	let t4;
	let p;
	let t5_value = /*article*/ ctx[0].short + "";
	let t5;
	let t6;
	let div1;
	let a_href_value;
	let each_value = /*article*/ ctx[0].tag_list;
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			a = element("a");
			div2 = element("div");
			t0 = text(t0_value);
			t1 = space();
			h1 = element("h1");
			t2 = text(t2_value);
			t3 = space();
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t4 = space();
			p = element("p");
			t5 = text(t5_value);
			t6 = space();
			div1 = element("div");
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			div2 = claim_element(a_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			t0 = claim_text(div2_nodes, t0_value);
			t1 = claim_space(div2_nodes);
			h1 = claim_element(div2_nodes, "H1", {});
			var h1_nodes = children(h1);
			t2 = claim_text(h1_nodes, t2_value);
			h1_nodes.forEach(detach_dev);
			t3 = claim_space(div2_nodes);
			div0 = claim_element(div2_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div0_nodes);
			}

			div0_nodes.forEach(detach_dev);
			t4 = claim_space(div2_nodes);
			p = claim_element(div2_nodes, "P", {});
			var p_nodes = children(p);
			t5 = claim_text(p_nodes, t5_value);
			p_nodes.forEach(detach_dev);
			t6 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			a_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h1, file, 31, 4, 530);
			attr_dev(div0, "class", "tags");
			add_location(div0, file, 33, 4, 560);
			add_location(p, file, 39, 4, 687);
			attr_dev(div1, "class", "flex-container svelte-1xwiejl");
			add_location(div1, file, 41, 4, 715);
			attr_dev(div2, "class", "card svelte-1xwiejl");
			add_location(div2, file, 29, 2, 478);
			attr_dev(a, "href", a_href_value = "/blog/" + /*article*/ ctx[0].slug);
			attr_dev(a, "class", "svelte-1xwiejl");
			add_location(a, file, 28, 0, 444);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			append_dev(a, div2);
			append_dev(div2, t0);
			append_dev(div2, t1);
			append_dev(div2, h1);
			append_dev(h1, t2);
			append_dev(div2, t3);
			append_dev(div2, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}

			append_dev(div2, t4);
			append_dev(div2, p);
			append_dev(p, t5);
			append_dev(div2, t6);
			append_dev(div2, div1);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*article*/ 1 && t0_value !== (t0_value = /*article*/ ctx[0].date_published + "")) set_data_dev(t0, t0_value);
			if (dirty & /*article*/ 1 && t2_value !== (t2_value = /*article*/ ctx[0].title + "")) set_data_dev(t2, t2_value);

			if (dirty & /*article*/ 1) {
				each_value = /*article*/ ctx[0].tag_list;
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div0, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*article*/ 1 && t5_value !== (t5_value = /*article*/ ctx[0].short + "")) set_data_dev(t5, t5_value);

			if (dirty & /*article*/ 1 && a_href_value !== (a_href_value = "/blog/" + /*article*/ ctx[0].slug)) {
				attr_dev(a, "href", a_href_value);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { article } = $$props;
	const writable_props = ["article"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<ShortCard> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("ShortCard", $$slots, []);

	$$self.$set = $$props => {
		if ("article" in $$props) $$invalidate(0, article = $$props.article);
	};

	$$self.$capture_state = () => ({ article });

	$$self.$inject_state = $$props => {
		if ("article" in $$props) $$invalidate(0, article = $$props.article);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [article];
}

class ShortCard extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { article: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ShortCard",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*article*/ ctx[0] === undefined && !("article" in props)) {
			console.warn("<ShortCard> was created without expected prop 'article'");
		}
	}

	get article() {
		throw new Error("<ShortCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set article(value) {
		throw new Error("<ShortCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/routes/index.svelte generated by Svelte v3.20.1 */

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	return child_ctx;
}

// (20:0) {#each articles as article}
function create_each_block$1(ctx) {
	let current;

	const shortcard = new ShortCard({
			props: { article: /*article*/ ctx[1] },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(shortcard.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(shortcard.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(shortcard, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const shortcard_changes = {};
			if (dirty & /*articles*/ 1) shortcard_changes.article = /*article*/ ctx[1];
			shortcard.$set(shortcard_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(shortcard.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(shortcard.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(shortcard, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$1.name,
		type: "each",
		source: "(20:0) {#each articles as article}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let t;
	let each_1_anchor;
	let current;
	const header = new Header({ $$inline: true });
	let each_value = /*articles*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			create_component(header.$$.fragment);
			t = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l: function claim(nodes) {
			claim_component(header.$$.fragment, nodes);
			t = claim_space(nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			mount_component(header, target, anchor);
			insert_dev(target, t, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*articles*/ 1) {
				each_value = /*articles*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(header.$$.fragment, local);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			transition_out(header.$$.fragment, local);
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(header, detaching);
			if (detaching) detach_dev(t);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload() {
	const res = await this.fetch(`/content/articles.json`);

	// console.log(await res.json());
	return { articles: await res.json() };
}

function instance$1($$self, $$props, $$invalidate) {
	let { articles } = $$props;
	const writable_props = ["articles"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Routes> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Routes", $$slots, []);

	$$self.$set = $$props => {
		if ("articles" in $$props) $$invalidate(0, articles = $$props.articles);
	};

	$$self.$capture_state = () => ({ preload, Header, ShortCard, articles });

	$$self.$inject_state = $$props => {
		if ("articles" in $$props) $$invalidate(0, articles = $$props.articles);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [articles];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { articles: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*articles*/ ctx[0] === undefined && !("articles" in props)) {
			console.warn("<Routes> was created without expected prop 'articles'");
		}
	}

	get articles() {
		throw new Error("<Routes>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set articles(value) {
		throw new Error("<Routes>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Routes;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguYzZlOTBjNTUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2NvbnRlbnQvU2hvcnRDYXJkLnN2ZWx0ZSIsIi4uLy4uLy4uL3NyYy9yb3V0ZXMvaW5kZXguc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG4gIGV4cG9ydCBsZXQgYXJ0aWNsZTtcbiAgaW1wb3J0IFwiLi9UYWdzLmNzc1wiO1xuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cbiAgYSB7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICB9XG4gIC5jYXJkIHtcbiAgICBwYWRkaW5nOiAyMHB4O1xuICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgYm9yZGVyOiAycHggc29saWQgI2JhYmFiYTtcbiAgICBib3gtc2hhZG93OiAzcHggM3B4IDBweCAjYmFiYWJhO1xuICB9XG4gIC8qIC5hcnRpY2xlLWVuZ2FnZW1lbnQge1xuICAgIG1hcmdpbi1yaWdodDogMjBweDtcbiAgfVxuICAuYXJ0aWNsZS1lbmdhZ2VtZW50IGltZyB7XG4gICAgaGVpZ2h0OiAyMHB4O1xuICAgIG1pbi13aWR0aDogMjZweDtcbiAgICB2ZXJ0aWNhbC1hbGlnbjogLTVweDtcbiAgfSAqL1xuICAuZmxleC1jb250YWluZXIge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gIH1cbjwvc3R5bGU+XG5cbjxhIGhyZWY9XCIvYmxvZy97YXJ0aWNsZS5zbHVnfVwiPlxuICA8ZGl2IGNsYXNzPVwiY2FyZFwiPlxuICAgIHthcnRpY2xlLmRhdGVfcHVibGlzaGVkfVxuICAgIDxoMT57YXJ0aWNsZS50aXRsZX08L2gxPlxuXG4gICAgPGRpdiBjbGFzcz1cInRhZ3NcIj5cbiAgICAgIHsjZWFjaCBhcnRpY2xlLnRhZ19saXN0IGFzIHRhZ31cbiAgICAgICAgPHNwYW4gY2xhc3M9XCJ0YWdcIj4je3RhZ308L3NwYW4+XG4gICAgICB7L2VhY2h9XG4gICAgPC9kaXY+XG5cbiAgICA8cD57YXJ0aWNsZS5zaG9ydH08L3A+XG5cbiAgICA8ZGl2IGNsYXNzPVwiZmxleC1jb250YWluZXJcIj5cbiAgICAgIDwhLS0gPGRpdiBjbGFzcz1cImFydGljbGUtZW5nYWdlbWVudFwiPlxuICAgICAgICA8aW1nXG4gICAgICAgICAgYWx0PVwiUmVhY3Rpb25zXCJcbiAgICAgICAgICBzcmM9XCJodHRwczovL3ByYWN0aWNhbGRldi1oZXJva3VhcHAtY29tLmZyZWV0bHMuZmFzdGx5Lm5ldC9hc3NldHMvcmVhY3Rpb25zLXN0YWNrLWVlMTY2ZTEzOGNhMTgyYTU2N2Y3NGM5ODZiNmY4MTBmNjcwZjRkMTk5YWNhOWM1NTBjYzdlNmY0OWYzNGJkMzMucG5nXCIgLz5cbiAgICAgICAgPHNwYW4+e2FydGljbGUucG9zaXRpdmVfcmVhY3Rpb25zX2NvdW50fTwvc3Bhbj5cbiAgICAgIDwvZGl2PlxuXG4gICAgICA8ZGl2IGNsYXNzPVwiYXJ0aWNsZS1lbmdhZ2VtZW50XCI+XG4gICAgICAgIDxpbWdcbiAgICAgICAgICBhbHQ9XCJDb21tZW50c1wiXG4gICAgICAgICAgc3JjPVwiaHR0cHM6Ly9wcmFjdGljYWxkZXYtaGVyb2t1YXBwLWNvbS5mcmVldGxzLmZhc3RseS5uZXQvYXNzZXRzL2NvbW1lbnRzLWJ1YmJsZS05OTU4ZDQxYjk2OWExNjIwYzYxNDM0N2Q1YWQzZjI3MGFiNDk1ODJjMWQ5ZjgyYjYxN2E2YjQxNTZkMDVkZGEwLnBuZ1wiIC8+XG4gICAgICAgIDxzcGFuPnthcnRpY2xlLmNvbW1lbnRzX2NvdW50fTwvc3Bhbj5cbiAgICAgIDwvZGl2PiAtLT5cblxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvYT5cbiIsIjxzY3JpcHQgY29udGV4dD1cIm1vZHVsZVwiPlxuICBleHBvcnQgYXN5bmMgZnVuY3Rpb24gcHJlbG9hZCgpIHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmZldGNoKGAvY29udGVudC9hcnRpY2xlcy5qc29uYCk7XG4gICAgLy8gY29uc29sZS5sb2coYXdhaXQgcmVzLmpzb24oKSk7XG4gICAgcmV0dXJuIHsgYXJ0aWNsZXM6IGF3YWl0IHJlcy5qc29uKCkgfTtcbiAgfVxuPC9zY3JpcHQ+XG5cbjxzY3JpcHQ+XG4gIGltcG9ydCBIZWFkZXIgZnJvbSBcIi4uL2NvbXBvbmVudHMvc2NhZmZvbGQvSGVhZGVyLnN2ZWx0ZVwiO1xuICBpbXBvcnQgU2hvcnRDYXJkIGZyb20gXCIuLi9jb21wb25lbnRzL2NvbnRlbnQvU2hvcnRDYXJkLnN2ZWx0ZVwiO1xuICBleHBvcnQgbGV0IGFydGljbGVzO1xuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cblxuPC9zdHlsZT5cblxuPEhlYWRlciAvPlxueyNlYWNoIGFydGljbGVzIGFzIGFydGljbGV9XG4gIDxTaG9ydENhcmQge2FydGljbGV9IC8+XG57L2VhY2h9XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozt3QkFtQzRCLEdBQUc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7aUVBQUgsR0FBRzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzRCQUwxQixHQUFPLElBQUMsY0FBYzs7Ozs0QkFDbEIsR0FBTyxJQUFDLEtBQUs7Ozs7Ozs0QkFRZCxHQUFPLElBQUMsS0FBSzs7Ozs7OEJBTFIsR0FBTyxJQUFDLFFBQVE7Ozs7Z0NBQXJCLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzZEQU5JLEdBQU8sSUFBQyxJQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3FFQUV2QixHQUFPLElBQUMsY0FBYztxRUFDbEIsR0FBTyxJQUFDLEtBQUs7Ozs2QkFHVCxHQUFPLElBQUMsUUFBUTs7OzsrQkFBckIsTUFBSTs7Ozs7Ozs7Ozs7Ozs7OztvQ0FBSixNQUFJOzs7cUVBS0osR0FBTyxJQUFDLEtBQUs7O3dGQVhMLEdBQU8sSUFBQyxJQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7T0EzQmYsT0FBTzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7K0JDa0JiLEdBQVE7Ozs7Z0NBQWIsTUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzhCQUFDLEdBQVE7Ozs7K0JBQWIsTUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozt3QkFBSixNQUFJOzs7Ozs7Ozs7OztrQ0FBSixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztlQWxCa0IsT0FBTztPQUNyQixHQUFHLFNBQVMsSUFBSSxDQUFDLEtBQUs7OztVQUVuQixRQUFRLFFBQVEsR0FBRyxDQUFDLElBQUk7Ozs7T0FEeEIsUUFBUTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
