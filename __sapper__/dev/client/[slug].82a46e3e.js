import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, B as validate_each_argument, v as validate_slots, e as element, t as text, b as claim_element, f as children, g as claim_text, j as detach_dev, k as attr_dev, l as add_location, m as insert_dev, n as append_dev, C as set_data_dev, u as space, w as claim_space, D as noop, E as destroy_each, c as create_component, h as claim_component, o as mount_component, p as transition_in, q as transition_out, r as destroy_component } from './client.e5a45c5d.js';
import { H as Header } from './Tags.7de8859c.js';

/* src/components/content/Article.svelte generated by Svelte v3.20.1 */
const file = "src/components/content/Article.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	return child_ctx;
}

// (29:2) {#each article.tag_list as tag}
function create_each_block(ctx) {
	let span;
	let t0;
	let t1_value = /*tag*/ ctx[1] + "";
	let t1;

	const block = {
		c: function create() {
			span = element("span");
			t0 = text("#");
			t1 = text(t1_value);
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t0 = claim_text(span_nodes, "#");
			t1 = claim_text(span_nodes, t1_value);
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", "tag");
			add_location(span, file, 29, 4, 727);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t0);
			append_dev(span, t1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*article*/ 1 && t1_value !== (t1_value = /*tag*/ ctx[1] + "")) set_data_dev(t1, t1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(29:2) {#each article.tag_list as tag}",
		ctx
	});

	return block;
}

// (33:0) {#if article.externalLink}
function create_if_block(ctx) {
	let div;
	let a;
	let t;
	let a_href_value;

	const block = {
		c: function create() {
			div = element("div");
			a = element("a");
			t = text("Shut Up Covid");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			a = claim_element(div_nodes, "A", { href: true });
			var a_nodes = children(a);
			t = claim_text(a_nodes, "Shut Up Covid");
			a_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "href", a_href_value = /*article*/ ctx[0].externalLink);
			add_location(a, file, 34, 4, 836);
			attr_dev(div, "class", "link-wrapper");
			add_location(div, file, 33, 2, 805);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, a);
			append_dev(a, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*article*/ 1 && a_href_value !== (a_href_value = /*article*/ ctx[0].externalLink)) {
				attr_dev(a, "href", a_href_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(33:0) {#if article.externalLink}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let h1;
	let t0_value = /*article*/ ctx[0].title + "";
	let t0;
	let t1;
	let span;
	let t2_value = /*article*/ ctx[0].date_published + "";
	let t2;
	let t3;
	let div0;
	let t4;
	let t5;
	let div2;
	let div1;
	let raw_value = /*article*/ ctx[0].body + "";
	let each_value = /*article*/ ctx[0].tag_list;
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	let if_block = /*article*/ ctx[0].externalLink && create_if_block(ctx);

	const block = {
		c: function create() {
			h1 = element("h1");
			t0 = text(t0_value);
			t1 = space();
			span = element("span");
			t2 = text(t2_value);
			t3 = space();
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t4 = space();
			if (if_block) if_block.c();
			t5 = space();
			div2 = element("div");
			div1 = element("div");
			this.h();
		},
		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", {});
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, t0_value);
			h1_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			span = claim_element(nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t2 = claim_text(span_nodes, t2_value);
			span_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			div0 = claim_element(nodes, "DIV", { class: true });
			var div0_nodes = children(div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div0_nodes);
			}

			div0_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			if (if_block) if_block.l(nodes);
			t5 = claim_space(nodes);
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h1, file, 25, 0, 586);
			attr_dev(span, "class", "publish-date");
			add_location(span, file, 26, 0, 611);
			attr_dev(div0, "class", "tags");
			add_location(div0, file, 27, 0, 670);
			attr_dev(div1, "class", "body");
			add_location(div1, file, 38, 2, 931);
			attr_dev(div2, "class", "body-wrapper");
			add_location(div2, file, 37, 0, 902);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h1, anchor);
			append_dev(h1, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, span, anchor);
			append_dev(span, t2);
			insert_dev(target, t3, anchor);
			insert_dev(target, div0, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}

			insert_dev(target, t4, anchor);
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, t5, anchor);
			insert_dev(target, div2, anchor);
			append_dev(div2, div1);
			div1.innerHTML = raw_value;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*article*/ 1 && t0_value !== (t0_value = /*article*/ ctx[0].title + "")) set_data_dev(t0, t0_value);
			if (dirty & /*article*/ 1 && t2_value !== (t2_value = /*article*/ ctx[0].date_published + "")) set_data_dev(t2, t2_value);

			if (dirty & /*article*/ 1) {
				each_value = /*article*/ ctx[0].tag_list;
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div0, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (/*article*/ ctx[0].externalLink) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(t5.parentNode, t5);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*article*/ 1 && raw_value !== (raw_value = /*article*/ ctx[0].body + "")) div1.innerHTML = raw_value;		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(span);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(div0);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t4);
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(div2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { article } = $$props;
	const writable_props = ["article"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Article> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Article", $$slots, []);

	$$self.$set = $$props => {
		if ("article" in $$props) $$invalidate(0, article = $$props.article);
	};

	$$self.$capture_state = () => ({ article });

	$$self.$inject_state = $$props => {
		if ("article" in $$props) $$invalidate(0, article = $$props.article);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [article];
}

class Article extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { article: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Article",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*article*/ ctx[0] === undefined && !("article" in props)) {
			console.warn("<Article> was created without expected prop 'article'");
		}
	}

	get article() {
		throw new Error("<Article>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set article(value) {
		throw new Error("<Article>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/routes/blog/[slug].svelte generated by Svelte v3.20.1 */

function create_fragment$1(ctx) {
	let t;
	let current;
	const header = new Header({ props: { small: "true" }, $$inline: true });

	const article_1 = new Article({
			props: { article: /*article*/ ctx[0] },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(header.$$.fragment);
			t = space();
			create_component(article_1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(header.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(article_1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(header, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(article_1, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const article_1_changes = {};
			if (dirty & /*article*/ 1) article_1_changes.article = /*article*/ ctx[0];
			article_1.$set(article_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(header.$$.fragment, local);
			transition_in(article_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(header.$$.fragment, local);
			transition_out(article_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(header, detaching);
			if (detaching) detach_dev(t);
			destroy_component(article_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload(page, session) {
	// the `slug` parameter is available because this file
	// is called [slug].json.js
	const { slug } = page.params;

	//   const article = await db.get(slug);
	const res = await this.fetch(`content/articles/${slug}.json`);

	const article = await res.json();
	return { article };
}

function instance$1($$self, $$props, $$invalidate) {
	let { article } = $$props;
	const writable_props = ["article"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<U5Bslugu5D> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("U5Bslugu5D", $$slots, []);

	$$self.$set = $$props => {
		if ("article" in $$props) $$invalidate(0, article = $$props.article);
	};

	$$self.$capture_state = () => ({ preload, Header, Article, article });

	$$self.$inject_state = $$props => {
		if ("article" in $$props) $$invalidate(0, article = $$props.article);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [article];
}

class U5Bslugu5D extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { article: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "U5Bslugu5D",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*article*/ ctx[0] === undefined && !("article" in props)) {
			console.warn("<U5Bslugu5D> was created without expected prop 'article'");
		}
	}

	get article() {
		throw new Error("<U5Bslugu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set article(value) {
		throw new Error("<U5Bslugu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default U5Bslugu5D;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiW3NsdWddLjgyYTQ2ZTNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9jb250ZW50L0FydGljbGUuc3ZlbHRlIiwiLi4vLi4vLi4vc3JjL3JvdXRlcy9ibG9nL1tzbHVnXS5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cbiAgZXhwb3J0IGxldCBhcnRpY2xlO1xuICBpbXBvcnQgXCIuL1RhZ3MuY3NzXCI7XG4gIC8vIHtcbiAgLy8gICBcInRpdGxlXCI6IFwiU2h1dCBVcCAtLSBRdWFyYW50aW5lIEVkaXRpb25cIixcbiAgLy8gICBcImRhdGVfcHVibGlzaGVkXCI6IFwiNC8xOS8yMDIwXCIsXG4gIC8vICAgXCJ0YWdfbGlzdFwiOiBbXCJwZWFjZVwiLCBcInRyYW5xdWlsaXR5XCIsIFwibm8tc2FyY2FzbS1kZXRlY3RlZC1oZXJlXCJdLFxuICAvLyAgIFwic2hvcnRcIjogXCJJIHdhcyBib3JlZC4gU28gSSBtYWRlIGEgd2ViIGFwcCB3aGljaCB5ZWxscyBhdCBwZW9wbGVcIixcbiAgLy8gICBcImV4dGVybmFsTGlua1wiOiBcImh0dHBzOi8vc2h1dC11cC1jb3ZpZC5uZW9jaXRpZXMub3JnL1wiLFxuICAvLyAgIFwiYm9keVwiOiBcIlwiLFxuICAvLyAgIFwic2x1Z1wiOiAxXG4gIC8vIH1cbjwvc2NyaXB0PlxuXG48c3R5bGU+XG4gIDpnbG9iYWwoYSkge1xuICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xuICAgIC8qIGNvbG9yOiB2YXIoLS1tYWluLWFjY2VudC1mZy1jb2xvcik7ICovXG4gIH1cbiAgOmdsb2JhbChpbWcpIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBtYXJnaW46IGF1dG87XG4gIH1cbjwvc3R5bGU+XG5cbjxoMT57YXJ0aWNsZS50aXRsZX08L2gxPlxuPHNwYW4gY2xhc3M9XCJwdWJsaXNoLWRhdGVcIj57YXJ0aWNsZS5kYXRlX3B1Ymxpc2hlZH08L3NwYW4+XG48ZGl2IGNsYXNzPVwidGFnc1wiPlxuICB7I2VhY2ggYXJ0aWNsZS50YWdfbGlzdCBhcyB0YWd9XG4gICAgPHNwYW4gY2xhc3M9XCJ0YWdcIj4je3RhZ308L3NwYW4+XG4gIHsvZWFjaH1cbjwvZGl2PlxueyNpZiBhcnRpY2xlLmV4dGVybmFsTGlua31cbiAgPGRpdiBjbGFzcz1cImxpbmstd3JhcHBlclwiPlxuICAgIDxhIGhyZWY9e2FydGljbGUuZXh0ZXJuYWxMaW5rfT5TaHV0IFVwIENvdmlkPC9hPiAgXG4gIDwvZGl2Plxuey9pZn1cbjxkaXYgY2xhc3M9XCJib2R5LXdyYXBwZXJcIj5cbiAgPGRpdiBjbGFzcz1cImJvZHlcIj5cbiAgICB7QGh0bWwgYXJ0aWNsZS5ib2R5fVxuICA8L2Rpdj5cbjwvZGl2PlxuIiwiPHNjcmlwdCBjb250ZXh0PVwibW9kdWxlXCI+XG4gIC8vIGltcG9ydCBkYiBmcm9tIFwiLi9fZGF0YWJhc2UuanNcIjsgLy8gdGhlIHVuZGVyc2NvcmUgdGVsbHMgU2FwcGVyIHRoaXMgaXNuJ3QgYSByb3V0ZVxuXG4gIGV4cG9ydCBhc3luYyBmdW5jdGlvbiBwcmVsb2FkKHBhZ2UsIHNlc3Npb24pIHtcbiAgICAvLyB0aGUgYHNsdWdgIHBhcmFtZXRlciBpcyBhdmFpbGFibGUgYmVjYXVzZSB0aGlzIGZpbGVcbiAgICAvLyBpcyBjYWxsZWQgW3NsdWddLmpzb24uanNcbiAgICBjb25zdCB7IHNsdWcgfSA9IHBhZ2UucGFyYW1zO1xuICAgIC8vICAgY29uc3QgYXJ0aWNsZSA9IGF3YWl0IGRiLmdldChzbHVnKTtcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmZldGNoKGBjb250ZW50L2FydGljbGVzLyR7c2x1Z30uanNvbmApO1xuICAgIGNvbnN0IGFydGljbGUgPSBhd2FpdCByZXMuanNvbigpO1xuICAgIHJldHVybiB7IGFydGljbGUgfTtcbiAgfVxuPC9zY3JpcHQ+XG5cbjxzY3JpcHQ+XG4gIGltcG9ydCBIZWFkZXIgZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvc2NhZmZvbGQvSGVhZGVyLnN2ZWx0ZVwiO1xuICBpbXBvcnQgQXJ0aWNsZSBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9jb250ZW50L0FydGljbGUuc3ZlbHRlXCI7XG4gIGV4cG9ydCBsZXQgYXJ0aWNsZTtcbjwvc2NyaXB0PlxuXG48SGVhZGVyIHNtYWxsPVwidHJ1ZVwiIC8+XG48QXJ0aWNsZSB7YXJ0aWNsZX0gLz5cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O3dCQTZCd0IsR0FBRzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztpRUFBSCxHQUFHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2tEQUtkLEdBQU8sSUFBQyxZQUFZOzs7Ozs7Ozs7Ozs2RUFBcEIsR0FBTyxJQUFDLFlBQVk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NEJBVDVCLEdBQU8sSUFBQyxLQUFLOzs7OzRCQUNVLEdBQU8sSUFBQyxjQUFjOzs7Ozs7Ozs2QkFhdkMsR0FBTyxJQUFDLElBQUk7OEJBWGQsR0FBTyxJQUFDLFFBQVE7Ozs7Z0NBQXJCLE1BQUk7Ozs7NEJBSUgsR0FBTyxJQUFDLFlBQVk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7cUVBUHBCLEdBQU8sSUFBQyxLQUFLO3FFQUNVLEdBQU8sSUFBQyxjQUFjOzs7NkJBRXpDLEdBQU8sSUFBQyxRQUFROzs7OytCQUFyQixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7O29DQUFKLE1BQUk7OzttQkFJSCxHQUFPLElBQUMsWUFBWTs7Ozs7Ozs7Ozs7Ozt1RUFPZCxHQUFPLElBQUMsSUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7T0F0Q1YsT0FBTzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7ZUNFSSxPQUFPLENBQUMsSUFBSSxFQUFFLE9BQU87OztTQUdqQyxJQUFJLEtBQUssSUFBSSxDQUFDLE1BQU07OztPQUV0QixHQUFHLFNBQVMsSUFBSSxDQUFDLEtBQUsscUJBQXFCLElBQUk7O09BQy9DLE9BQU8sU0FBUyxHQUFHLENBQUMsSUFBSTtVQUNyQixPQUFPOzs7O09BUFAsT0FBTzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
